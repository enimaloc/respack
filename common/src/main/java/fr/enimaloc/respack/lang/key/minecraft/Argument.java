package fr.enimaloc.respack.lang.key.minecraft;

import fr.enimaloc.respack.lang.key.Key;

public enum Argument implements Key {
    ANCHOR_INVALID("argument.anchor.invalid"),
    ANGLE_INCOMPLETE("argument.angle.incomplete"),
    ANGLE_INVALID("argument.angle.invalid"),
    BLOCK_ID_INVALID("argument.block.id.invalid"),
    BLOCK_PROPERTY_DUPLICATE("argument.block.property.duplicate"),
    BLOCK_PROPERTY_INVALID("argument.block.property.invalid"),
    BLOCK_PROPERTY_NOVALUE("argument.block.property.novalue"),
    BLOCK_PROPERTY_UNCLOSED("argument.block.property.unclosed"),
    BLOCK_PROPERTY_UNKNOWN("argument.block.property.unknown"),
    BLOCK_TAG_DISALLOWED("argument.block.tag.disallowed"),
    COLOR_INVALID("argument.color.invalid"),
    COMPONENT_INVALID("argument.component.invalid"),
    CRITERIA_INVALID("argument.criteria.invalid"),
    DIMENSION_INVALID("argument.dimension.invalid"),
    DOUBLE_BIG("argument.double.big"),
    DOUBLE_LOW("argument.double.low"),
    ENTITY_INVALID("argument.entity.invalid"),
    ENTITY_NOTFOUND_ENTITY("argument.entity.notfound.entity"),
    ENTITY_NOTFOUND_PLAYER("argument.entity.notfound.player"),
    ENTITY_OPTIONS_ADVANCEMENTS_DESCRIPTION("argument.entity.options.advancements.description"),
    ENTITY_OPTIONS_DISTANCE_DESCRIPTION("argument.entity.options.distance.description"),
    ENTITY_OPTIONS_DISTANCE_NEGATIVE("argument.entity.options.distance.negative"),
    ENTITY_OPTIONS_DX_DESCRIPTION("argument.entity.options.dx.description"),
    ENTITY_OPTIONS_DY_DESCRIPTION("argument.entity.options.dy.description"),
    ENTITY_OPTIONS_DZ_DESCRIPTION("argument.entity.options.dz.description"),
    ENTITY_OPTIONS_GAMEMODE_DESCRIPTION("argument.entity.options.gamemode.description"),
    ENTITY_OPTIONS_INAPPLICABLE("argument.entity.options.inapplicable"),
    ENTITY_OPTIONS_LEVEL_DESCRIPTION("argument.entity.options.level.description"),
    ENTITY_OPTIONS_LEVEL_NEGATIVE("argument.entity.options.level.negative"),
    ENTITY_OPTIONS_LIMIT_DESCRIPTION("argument.entity.options.limit.description"),
    ENTITY_OPTIONS_LIMIT_TOOSMALL("argument.entity.options.limit.toosmall"),
    ENTITY_OPTIONS_MODE_INVALID("argument.entity.options.mode.invalid"),
    ENTITY_OPTIONS_NAME_DESCRIPTION("argument.entity.options.name.description"),
    ENTITY_OPTIONS_NBT_DESCRIPTION("argument.entity.options.nbt.description"),
    ENTITY_OPTIONS_PREDICATE_DESCRIPTION("argument.entity.options.predicate.description"),
    ENTITY_OPTIONS_SCORES_DESCRIPTION("argument.entity.options.scores.description"),
    ENTITY_OPTIONS_SORT_DESCRIPTION("argument.entity.options.sort.description"),
    ENTITY_OPTIONS_SORT_IRREVERSIBLE("argument.entity.options.sort.irreversible"),
    ENTITY_OPTIONS_TAG_DESCRIPTION("argument.entity.options.tag.description"),
    ENTITY_OPTIONS_TEAM_DESCRIPTION("argument.entity.options.team.description"),
    ENTITY_OPTIONS_TYPE_DESCRIPTION("argument.entity.options.type.description"),
    ENTITY_OPTIONS_TYPE_INVALID("argument.entity.options.type.invalid"),
    ENTITY_OPTIONS_UNKNOWN("argument.entity.options.unknown"),
    ENTITY_OPTIONS_UNTERMINATED("argument.entity.options.unterminated"),
    ENTITY_OPTIONS_VALUELESS("argument.entity.options.valueless"),
    ENTITY_OPTIONS_X_ROTATION_DESCRIPTION("argument.entity.options.x_rotation.description"),
    ENTITY_OPTIONS_X_DESCRIPTION("argument.entity.options.x.description"),
    ENTITY_OPTIONS_Y_ROTATION_DESCRIPTION("argument.entity.options.y_rotation.description"),
    ENTITY_OPTIONS_Y_DESCRIPTION("argument.entity.options.y.description"),
    ENTITY_OPTIONS_Z_DESCRIPTION("argument.entity.options.z.description"),
    ENTITY_SELECTOR_ALLENTITIES("argument.entity.selector.allEntities"),
    ENTITY_SELECTOR_ALLPLAYERS("argument.entity.selector.allPlayers"),
    ENTITY_SELECTOR_MISSING("argument.entity.selector.missing"),
    ENTITY_SELECTOR_NEARESTPLAYER("argument.entity.selector.nearestPlayer"),
    ENTITY_SELECTOR_NOT_ALLOWED("argument.entity.selector.not_allowed"),
    ENTITY_SELECTOR_RANDOMPLAYER("argument.entity.selector.randomPlayer"),
    ENTITY_SELECTOR_SELF("argument.entity.selector.self"),
    ENTITY_SELECTOR_UNKNOWN("argument.entity.selector.unknown"),
    ENTITY_TOOMANY("argument.entity.toomany"),
    ENUM_INVALID("argument.enum.invalid"),
    FLOAT_BIG("argument.float.big"),
    FLOAT_LOW("argument.float.low"),
    GAMEMODE_INVALID("argument.gamemode.invalid"),
    ID_INVALID("argument.id.invalid"),
    ID_UNKNOWN("argument.id.unknown"),
    INTEGER_BIG("argument.integer.big"),
    INTEGER_LOW("argument.integer.low"),
    ITEM_ID_INVALID("argument.item.id.invalid"),
    ITEM_TAG_DISALLOWED("argument.item.tag.disallowed"),
    LITERAL_INCORRECT("argument.literal.incorrect"),
    LONG_BIG("argument.long.big"),
    LONG_LOW("argument.long.low"),
    NBT_ARRAY_INVALID("argument.nbt.array.invalid"),
    NBT_ARRAY_MIXED("argument.nbt.array.mixed"),
    NBT_EXPECTED_KEY("argument.nbt.expected.key"),
    NBT_EXPECTED_VALUE("argument.nbt.expected.value"),
    NBT_LIST_MIXED("argument.nbt.list.mixed"),
    NBT_TRAILING("argument.nbt.trailing"),
    PLAYER_ENTITIES("argument.player.entities"),
    PLAYER_TOOMANY("argument.player.toomany"),
    PLAYER_UNKNOWN("argument.player.unknown"),
    POS_MISSING_DOUBLE("argument.pos.missing.double"),
    POS_MISSING_INT("argument.pos.missing.int"),
    POS_MIXED("argument.pos.mixed"),
    POS_OUTOFBOUNDS("argument.pos.outofbounds"),
    POS_OUTOFWORLD("argument.pos.outofworld"),
    POS_UNLOADED("argument.pos.unloaded"),
    POS2D_INCOMPLETE("argument.pos2d.incomplete"),
    POS3D_INCOMPLETE("argument.pos3d.incomplete"),
    RANGE_EMPTY("argument.range.empty"),
    RANGE_INTS("argument.range.ints"),
    RANGE_SWAPPED("argument.range.swapped"),
    RESOURCE_TAG_INVALID_TYPE("argument.resource_tag.invalid_type"),
    RESOURCE_TAG_NOT_FOUND("argument.resource_tag.not_found"),
    RESOURCE_INVALID_TYPE("argument.resource.invalid_type"),
    RESOURCE_NOT_FOUND("argument.resource.not_found"),
    ROTATION_INCOMPLETE("argument.rotation.incomplete"),
    SCOREBOARDDISPLAYSLOT_INVALID("argument.scoreboardDisplaySlot.invalid"),
    SCOREHOLDER_EMPTY("argument.scoreHolder.empty"),
    TIME_INVALID_TICK_COUNT("argument.time.invalid_tick_count"),
    TIME_INVALID_UNIT("argument.time.invalid_unit"),
    TIME_TICK_COUNT_TOO_LOW("argument.time.tick_count_too_low"),
    UUID_INVALID("argument.uuid.invalid"),
    BLOCK_TAG_UNKNOWN("arguments.block.tag.unknown"),
    FUNCTION_TAG_UNKNOWN("arguments.function.tag.unknown"),
    FUNCTION_UNKNOWN("arguments.function.unknown"),
    ITEM_OVERSTACKED("arguments.item.overstacked"),
    ITEM_TAG_UNKNOWN("arguments.item.tag.unknown"),
    NBTPATH_NODE_INVALID("arguments.nbtpath.node.invalid"),
    NBTPATH_NOTHING_FOUND("arguments.nbtpath.nothing_found"),
    NBTPATH_TOO_DEEP("arguments.nbtpath.too_deep"),
    NBTPATH_TOO_LARGE("arguments.nbtpath.too_large"),
    OBJECTIVE_NOTFOUND("arguments.objective.notFound"),
    OBJECTIVE_READONLY("arguments.objective.readonly"),
    OPERATION_DIV0("arguments.operation.div0"),
    OPERATION_INVALID("arguments.operation.invalid"),
    SWIZZLE_INVALID("arguments.swizzle.invalid");

    private final String key;

    Argument(String key) {
        this.key = key;
    }

    @Override
    public String getKey() {
        return key;
    }
}
